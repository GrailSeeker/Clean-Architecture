@page "/student"

@using SexyUI.Data
@using StudentManagementDemo.Core.Application.Students.Queries.GetStudentDetail
@using Humanizer

@inject StudentService StudentService
@inject IToastService toastService

@if (ComponentLoading && !error)
{
    <br />
    <div class="container">
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-info" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    </div>
}

@if (StudentDetailCollection != null)
{
    @if (StudentDetailCollection.Count > 0)
    {
        <br />
        <div class="container-fluid">
            <span class="badge badge-pill badge-info">@StudentDetailCollection.Count Record(s)</span>
        </div>
        <br />
        <div class="container-fluid">
            <div class="row mb-2">
                @foreach (var student in StudentDetailCollection)
                {
                    <div class="col-md-6">
                        <div class="card border-info flex-md-row mb-4 box-shadow h-md-250 shadow">
                            <div class="card-body bg-info text-center" style="width:80px">
                                <h1 class="text-light display-2">@student.StudentName[0]</h1>
                            </div>
                            <div class="card-body d-flex flex-column align-items-stretch">
                                <input class="mb-0 border-0 h3 text-info" style="width:250px" type="text" @bind="student.StudentName" />
                                <p class="mb-1 text-muted "><small>@student.StudentId</small></p>
                                <input class="mb-2 border-0 text-info" style="width:250px" type="text" @bind="student.StudentEmail" />
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted">since @student.StudentCreated.ToString("MMMM/dd")</small>
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-sm border-0" @onclick="@(() => UpdateStudentAsync(student.StudentId, student.StudentName, student.StudentEmail))">
                                            <i class="fa fa-check-circle  text-info" aria-hidden="true"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm border-0" @onclick="@(() => DeleteStudentAsync(student.StudentId, student.StudentName))">
                                            <i class="fa fa-trash-o text-danger" aria-hidden="true"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}

@code {

    private bool error = false;

    [Parameter]
    public ICollection<StudentDetailViewModel> StudentDetailCollection { get; set; }

    [Parameter]
    public bool ComponentLoading { get; set; }

    [Parameter]
    public int OneOrMany { get; set; }

    private async Task UpdateStudentAsync(Guid id, string name, string email)
    {
        error = false;
        ComponentLoading = true;
        //StudentDetailCollection = null;

        try
        {
            var studentId = await StudentService.UpdateStudentDetailsAsync(id, name, email);

            if (studentId == null)
            {
                error = true;
                throw new Exception($"Could not update {name}.");
            }

            error = false;

            //
            if (OneOrMany == 1)
            {

                // Get student details.
                var studentDetails = await StudentService.GetStudentDetailsByIdAsync(id);

                // Recreate collection.
                StudentDetailCollection = new List<StudentDetailViewModel>();
                // Add to collection.
                StudentDetailCollection.Add(studentDetails);
            }
            else
            {
                // Get student details.
                var allStudentDetails = await StudentService.GetAllStudentDetailsAsync();

                // Recreate collection.
                StudentDetailCollection = new List<StudentDetailViewModel>();
                // Add to collection.
                StudentDetailCollection = allStudentDetails;
            }

            toastService.ShowSuccess($"{name} updated.");
        }
        catch (Exception ex)
        {
            error = true;
            toastService.ShowError(ex.Message);
        }

        ComponentLoading = false;
    }

    private async Task DeleteStudentAsync(Guid id, string name)
    {
        error = false;
        ComponentLoading = true;
        //StudentDetailCollection = null;

        try
        {
            var deleted = await StudentService.DeleteStudentAsync(id);

            if (!deleted)
            {
                error = true;
                throw new Exception($"Could not delete {name}.");
            }

            error = false;

            //
            if (OneOrMany == 1)
            {

                // Get student details.
                var studentDetails = await StudentService.GetStudentDetailsByIdAsync(id);

                // Recreate collection.
                StudentDetailCollection = new List<StudentDetailViewModel>();
                // Add to collection.
                StudentDetailCollection.Add(studentDetails);
            }
            else
            {
                // Get student details.
                var allStudentDetails = await StudentService.GetAllStudentDetailsAsync();

                // Recreate collection.
                StudentDetailCollection = new List<StudentDetailViewModel>();
                // Add to collection.
                StudentDetailCollection = allStudentDetails;
            }

            toastService.ShowSuccess($"{name} deleted.");
        }
        catch (Exception ex)
        {
            error = true;
            toastService.ShowError(ex.Message);
        }

        ComponentLoading = false;
    }
}
